<div class="container-fluid">
    <div class="left-sidebar">
        <button class="new-chat">
            <img src="/images/plus.png" alt="plus icon">
            <p>New chat</p>
        </button>

        <!-- Thêm button chọn AI trong index.hbs -->
        <div class="ai-selector">
            <button id="geminiBtn" class="ai-btn active">
                <img src="/images/gemini_icon.png" width="30px" height="30px" style="margin-right: 5px;">Gemini</button>
            <button id="chatgptBtn" class="ai-btn">
                <img src="/images/gpticon.png" width="20px" height="20px" style="margin-right: 5px;">ChatGPT</button>
        </div>


        <div id="chat-history-container">
            <!-- Chat histories will be loaded here -->
        </div>

        <form id="logoutForm" action="/logout" method="POST" style="display: none;"></form>

        <div class="log-out" onclick="document.getElementById('logoutForm').submit(); return false;">
            <img src="/images/logout.png" alt="log out icon">
            <p class="LogOutText">Log out</p>
        </div>
    </div>

    <div class="Right-Area">
        <div class="chat-area">
            
        </div>

        <div class="user-interact">
            <button class="regenerate-response" id="saveChat">
                <img src="/images/save_icon.png" alt="save icon" width="20px" height="20px">
                <p>Save Chat</p>
            </button>

            <div class="user-input">
                <form id="chatForm" class="d-flex input-field">
                    <input type="text" class="form-control me-2 ask-bot" id="userInput" placeholder="Ask the bot">
                    <button type="submit" class="btn btn-primary">
                        <img src="/images/send.png" class="send-icon">
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Đảm bảo bạn đã thêm marked.js từ CDN -->
<script src="https://cdn.jsdelivr.net/npm/marked@4.0.0/lib/marked.min.js"></script>

<script>

    let currentMessages = [];
    let currentAI = 'gemini'; // Default AI
    let src_icon = '/images/gemini_icon.png';
    let isProcessing = false; // Biến để track trạng thái đang xử lý

    window.onload = async function () {
        const userInput = "{{user_input}}";
        console.log("CHECK USER INPUT: ", userInput);

        if (!userInput.trim()) return;

        // Lưu message vào mảng
        currentMessages.push({
            role: 'user',
            content: userInput
        });

        // Add user message
        const chatMessages = document.querySelector('.chat-area');
        chatMessages.innerHTML += `<div class="user-query">
                                        <img src="/images/usericon.png" alt="user icon" class="user-icon">
                                        <p class="query-text">${userInput}</p>
                                    </div>`;

        // Create container for assistant's response
        const assistantDiv = document.createElement('div');
        assistantDiv.className = 'bot-answer';
        assistantDiv.innerHTML = `
            <div class="bot-info">
                <img src=${src_icon} alt="gpt icon" class="bot-icon" width="30px" height="30px">
                <p class="answer-text"></p>
            </div>
            <div class="rating">
                <img src="/images/like.png" alt="like icon" class="like-icon">
                <img src="/images/dislike.png" alt="dislike icon" class="dislike-icon">
            </div>
        `;
        chatMessages.appendChild(assistantDiv);
        
        const answerText = assistantDiv.querySelector('.answer-text');
        let fullResponse = '';

        try {
            const response = await fetch(currentAI === 'gemini' ? '/api/gemini' : '/api/chatgpt', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: userInput })
            });

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { value, done } = await reader.read();
                if (done) break;
                
                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');
                
                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        const data = line.slice(5).trim();
                        
                        if (data === '[DONE]') {
                            console.log('Stream completed');
                            continue;
                        }
                        
                        try {
                            const parsed = JSON.parse(data);
                            if (parsed.content) {
                                fullResponse += parsed.content;
                                answerText.innerHTML = marked.parse(fullResponse);
                                chatMessages.scrollTop = chatArea.scrollHeight;
                            }
                        } catch (e) {
                            console.error('Error parsing chunk:', e);
                        }
                    }
                }
            }

            // Sau khi stream hoàn tất, lưu response vào currentMessages
            currentMessages.push({
                role: 'assistant',
                content: fullResponse
            });

        } catch (error) {
            console.error('Error:', error);
            answerText.innerHTML = 'Sorry, something went wrong. Please try again.';
            
            // Lưu error message vào currentMessages
            currentMessages.push({
                role: 'assistant',
                content: 'Sorry, something went wrong. Please try again.'
            });
        }
    };


    // Xử lý nút Save Chat
    document.getElementById('saveChat').addEventListener('click', async () => {
        try {
            const response = await fetch('/chat/save', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chatName: `Chat ${new Date().toLocaleString()}`,
                    messages: currentMessages
                })
            });

            if (response.ok) {
                loadChatHistory();
                alert('Chat saved successfully!');
            }
        } catch (error) {
            console.error('Error saving chat:', error);
        }
    });

    // Load chat history
    async function loadChatHistory() {
        try {
            const response = await fetch('/chat/history');
            const chats = await response.json();

            const container = document.getElementById('chat-history-container');
            container.innerHTML = chats.map(chat => `
                <div class="chat-history" data-chat-id="${chat.id}">
                    <img src="/images/message.png" alt="message icon" class="message-icon">
                    <div class="history-frame">
                        <p>${chat.chatName}</p>
                    </div>
                    <img src="/images/pen.png" alt="pen icon" class="pen-icon">
                    <img src="/images/bin.png" alt="bin icon" class="bin-icon" data-chat-id="${chat.id}">
                    <img src="/images/share.png" alt="share icon" class="share-icon">
                </div>
            `).join('');

            // Add click event listeners to chat histories
            document.querySelectorAll('.chat-history').forEach(chatElement => {
                chatElement.addEventListener('click', (e) => {
                    if (!e.target.matches('.pen-icon, .bin-icon, .share-icon')) {
                        const chatId = chatElement.dataset.chatId;
                        loadChatDetail(chatId);

                        document.querySelectorAll('.chat-history').forEach(el => {
                            el.classList.remove('selected');
                        });
                        chatElement.classList.add('selected');
                    }
                });
            });

            // Add click event listeners to delete buttons
            document.querySelectorAll('.bin-icon').forEach(deleteBtn => {
                deleteBtn.addEventListener('click', async (e) => {
                    e.stopPropagation(); // Ngăn không cho sự kiện click lan ra chat-history

                    const chatId = e.target.dataset.chatId;
                    if (confirm('Are you sure you want to delete this chat?')) {
                        try {
                            const response = await fetch(`/chat/${chatId}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                // Nếu chat đang được hiển thị, clear màn hình chat
                                const selectedChat = document.querySelector('.chat-history.selected');
                                if (selectedChat && selectedChat.dataset.chatId === chatId) {
                                    document.querySelector('.chat-area').innerHTML = '';
                                    currentMessages = [];
                                }

                                // Reload chat history
                                loadChatHistory();
                            } else {
                                alert('Failed to delete chat');
                            }
                        } catch (error) {
                            console.error('Error deleting chat:', error);
                            alert('Error deleting chat');
                        }
                    }
                });
            });
        } catch (error) {
            console.error('Error loading chat history:', error);
        }
    }

    // Load chat history when page loads
    window.addEventListener('load', loadChatHistory);

    // Thêm hàm để load một chat cụ thể
    async function loadChatDetail(chatId) {
        try {
            const response = await fetch(`/chat/${chatId}`);
            const chat = await response.json();

            // Clear current chat area
            const chatMessages = document.querySelector('.chat-area');
            chatMessages.innerHTML = '';

            // Reset currentMessages array
            currentMessages = [];

            // Display each message
            chat.messages.forEach(message => {
                message.content = marked.parse(message.content);
                currentMessages.push(message);

                if (message.role === 'user') {
                    chatMessages.innerHTML += `
                        <div class="user-query">
                            <img src="/images/usericon.png" alt="user icon" class="user-icon">
                            <p class="query-text">${message.content}</p>
                        </div>`;
                } else {
                    chatMessages.innerHTML += `
                        <div class="bot-answer">
                            <div class="bot-info">
                                <img src="/images/gpticon.png" alt="gpt icon" class="bot-icon">
                                <p class="answer-text">${message.content}</p>
                            </div>
                            <div class="rating">
                                <img src="/images/like.png" alt="like icon" class="like-icon">
                                <img src="/images/dislike.png" alt="dislike icon" class="dislike-icon">
                            </div>
                        </div>`;
                }
            });

            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;

        } catch (error) {
            console.error('Error loading chat detail:', error);
        }
    }

    // Add event listener for New Chat button
    document.querySelector('.new-chat').addEventListener('click', () => {
        // Clear chat area
        document.querySelector('.chat-area').innerHTML = '';

        // Reset currentMessages array
        currentMessages = [];

        // Remove selected state from all chat histories
        document.querySelectorAll('.chat-history').forEach(el => {
            el.classList.remove('selected');
        });
    });

    // AI selector buttons
    document.getElementById('geminiBtn').addEventListener('click', function () {
        currentAI = 'gemini';
        src_icon = '/images/gemini_icon.png';
        this.classList.add('active');
        document.getElementById('chatgptBtn').classList.remove('active');

        // Clear chat area
        document.querySelector('.chat-area').innerHTML = '';

        // Reset currentMessages array
        currentMessages = [];

        // Remove selected state from all chat histories
        document.querySelectorAll('.chat-history').forEach(el => {
            el.classList.remove('selected');
        });
    });

    document.getElementById('chatgptBtn').addEventListener('click', function () {
        currentAI = 'chatgpt';
        src_icon = '/images/gpticon.png';
        this.classList.add('active');
        document.getElementById('geminiBtn').classList.remove('active');

        // Clear chat area
        document.querySelector('.chat-area').innerHTML = '';

        // Reset currentMessages array
        currentMessages = [];

        // Remove selected state from all chat histories
        document.querySelectorAll('.chat-history').forEach(el => {
            el.classList.remove('selected');
        });
    });

    // Modify your existing chat form submission
    document.getElementById('chatForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const userInput = document.getElementById('userInput').value;
        if (!userInput.trim()) return;
        const countWords = userInput.trim().length;
        if (countWords > 1000) {
            alert('Input exceeds the maximum allowed token limit !');
            return;
        }

        // Add user message to chat and currentMessages
        currentMessages.push({
            role: 'user',
            content: userInput
        });

        // Add user message
        const chatMessages = document.querySelector('.chat-area');
        chatMessages.innerHTML += `<div class="user-query">
                                        <img src="/images/usericon.png" alt="user icon" class="user-icon">
                                        <p class="query-text">${userInput}</p>
                                    </div>`;
        
        document.getElementById('userInput').value = '';

        // Create container for assistant's response
        const assistantDiv = document.createElement('div');
        assistantDiv.className = 'bot-answer';
        assistantDiv.innerHTML = `
            <div class="bot-info">
                <img src=${src_icon} alt="gpt icon" class="bot-icon" width="40px" height="40px">
                <p class="answer-text"></p>
            </div>
            <div class="rating">
                <img src="/images/like.png" alt="like icon" class="like-icon">
                <img src="/images/dislike.png" alt="dislike icon" class="dislike-icon">
            </div>
        `;
        chatMessages.appendChild(assistantDiv);
        
        const answerText = assistantDiv.querySelector('.answer-text');
        let fullResponse = '';

        try {
            const apiEndpoint = currentAI === 'gemini' ? '/api/gemini' : '/api/chatgpt';
            const response = await fetch(apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt: userInput })
            });

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { value, done } = await reader.read();
                if (done) break;
                
                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');
                
                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        const data = line.slice(5).trim();
                        
                        if (data === '[DONE]') {
                            console.log('Stream completed');
                            continue;
                        }
                        
                        try {
                            const parsed = JSON.parse(data);
                            if (parsed.content) {
                                fullResponse += parsed.content;
                                answerText.innerHTML = marked.parse(fullResponse);
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }
                        } catch (e) {
                            console.error('Error parsing chunk:', e);
                        }
                    }
                }
            }

            // After streaming is complete, add assistant's full response to currentMessages
            currentMessages.push({
                role: 'assistant',
                content: fullResponse
            });

        } catch (error) {
            console.error('Error:', error);
            answerText.textContent = 'Sorry, there was an error processing your request.';
            
            // Add error message to currentMessages
            currentMessages.push({
                role: 'assistant',
                content: 'Sorry, there was an error processing your request.'
            });
        }
    });

    // Thêm CSS animation cho typing effect
    const style = document.createElement('style');
    style.textContent = `
        .answer-text {
            border-right: 2px solid transparent;
            animation: blink-caret 0.75s step-end infinite;
        }

        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: #666 }
        }
    `;
    document.head.appendChild(style);


</script>